name: Label issues based on keywords
on:
  issues:
    types: [opened, edited, reopened]
permissions:
  issues: write          # needed so the workflow can add labels
  contents: read
concurrency:
  group: issue-labeler-${{ github.event.issue.number }}
  cancel-in-progress: true
jobs:
  add-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Label issues based on keywords
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea  # v7.0.1
        with:
          script: |
            // Configuration: Add new labels and keywords here
            const labelConfig = {
              rocm: {
                // Keyword search - matches whole words only (with word boundaries)
                keywords: [
                  "hip",
                  "composable kernel",
                  "rccl",
                  "migraphx",
                  "hipgraph",
                  "ROCm System Management Interface",
                ],
                
                // Substring search - matches anywhere in text (partial matches)
                substrings: [
                  "hip-",            // matches hip-config, etc.
                  
                  // Architecture prefixes
                  "gfx",             // matches gfx942, gfx90a, etc.
                  "cdna",            // matches cdna2, cdna3, etc.
                  "rdna",            // matches rdna2, rdna3, etc.
                  
                  // Library patterns
                  "torch_hip",       // matches pytorch_hip, torch_hip_extension, etc.
                  "_hip",            // matches any_hip, torch_hip, etc.
                  "hip_",            // matches hip_version, hip_runtime, etc.
                  
                  // ROCm tools and libraries
                  "hipify",          // matches hipify-perl, hipify-clang, etc.
                ],
                
                // Regex patterns - for complex pattern matching
                regexPatterns: [
                  {
                    pattern: "\\bmi\\d{3}[a-z]*\\b",  // matches mi200, mi300x, mi300a, mi355x, mi450, etc.
                    description: "AMD GPU names (mi + 3 digits + optional letters)",
                    flags: "gi"
                  }
                ],
              },
            };
            
            // Helper function to create regex based on search type
            function createSearchRegex(term, type) {
              // Escape special regex characters in the term
              const escapedTerm = term.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
              
              switch (type) {
                case 'keyword':
                  // Word boundary search - matches whole words only
                  return new RegExp(`\\b${escapedTerm}\\b`, "gi");
                case 'substring':
                  // Substring search - matches anywhere in the text
                  return new RegExp(escapedTerm, "gi");
                default:
                  throw new Error(`Unknown search type: ${type}`);
              }
            }
            
            // Helper function to find matching terms in text with line information
            function findMatchingTermsWithLines(text, keywords = [], substrings = [], regexPatterns = []) {
              const matches = [];
              const lines = text.split('\n');
              
              // Process keyword searches
              for (const term of keywords) {
                const regex = createSearchRegex(term, 'keyword');
                const termMatches = [];
                
                // Check each line for matches
                lines.forEach((line, lineIndex) => {
                  const lineMatches = line.match(regex);
                  if (lineMatches) {
                    lineMatches.forEach(match => {
                      termMatches.push({
                        match: match,
                        lineNumber: lineIndex + 1,
                        lineContent: line.trim(),
                        searchType: 'keyword',
                        originalTerm: term,
                        // Show context around the match in the line
                        context: line.length > 100 ? 
                          line.substring(Math.max(0, line.toLowerCase().indexOf(match.toLowerCase()) - 30), 
                                       line.toLowerCase().indexOf(match.toLowerCase()) + match.length + 30) + '...' 
                          : line.trim()
                      });
                    });
                  }
                });
                
                if (termMatches.length > 0) {
                  matches.push({
                    term: term,
                    searchType: 'keyword',
                    matches: termMatches,
                    count: termMatches.length
                  });
                }
              }
              
              // Process substring searches
              for (const term of substrings) {
                const regex = createSearchRegex(term, 'substring');
                const termMatches = [];
                
                // Check each line for matches
                lines.forEach((line, lineIndex) => {
                  const lineMatches = line.match(regex);
                  if (lineMatches) {
                    lineMatches.forEach(match => {
                      termMatches.push({
                        match: match,
                        lineNumber: lineIndex + 1,
                        lineContent: line.trim(),
                        searchType: 'substring',
                        originalTerm: term,
                        // Show context around the match in the line
                        context: line.length > 100 ? 
                          line.substring(Math.max(0, line.toLowerCase().indexOf(match.toLowerCase()) - 30), 
                                       line.toLowerCase().indexOf(match.toLowerCase()) + match.length + 30) + '...' 
                          : line.trim()
                      });
                    });
                  }
                });
                
                if (termMatches.length > 0) {
                  matches.push({
                    term: term,
                    searchType: 'substring',
                    matches: termMatches,
                    count: termMatches.length
                  });
                }
              }
              
              // Process regex patterns
              for (const regexConfig of regexPatterns) {
                const regex = new RegExp(regexConfig.pattern, regexConfig.flags || "gi");
                const termMatches = [];
                
                // Check each line for matches
                lines.forEach((line, lineIndex) => {
                  const lineMatches = line.match(regex);
                  if (lineMatches) {
                    lineMatches.forEach(match => {
                      termMatches.push({
                        match: match,
                        lineNumber: lineIndex + 1,
                        lineContent: line.trim(),
                        searchType: 'regex',
                        originalTerm: regexConfig.pattern,
                        description: regexConfig.description,
                        // Show context around the match in the line
                        context: line.length > 100 ? 
                          line.substring(Math.max(0, line.toLowerCase().indexOf(match.toLowerCase()) - 30), 
                                       line.toLowerCase().indexOf(match.toLowerCase()) + match.length + 30) + '...' 
                          : line.trim()
                      });
                    });
                  }
                });
                
                if (termMatches.length > 0) {
                  matches.push({
                    term: regexConfig.description || regexConfig.pattern,
                    searchType: 'regex',
                    pattern: regexConfig.pattern,
                    matches: termMatches,
                    count: termMatches.length
                  });
                }
              }
              
              return matches;
            }
            
            // Helper function to check if label should be added
            async function processLabel(labelName, config) {
              const body = context.payload.issue.body || "";
              const title = context.payload.issue.title || "";
              
              // Combine title and body for searching
              const searchText = title + " " + body;
              
              core.notice(`Searching in issue title and body (${searchText.length} characters total)`);
              core.notice(`Issue Title: "${title}"`);
              core.notice(`Issue Body length: ${body.length} characters`);
              
              let shouldAddLabel = false;
              let reason = '';
              
              // Check for terms in the issue title and body
              if (searchText.trim()) {
                const keywords = config.keywords || [];
                const substrings = config.substrings || [];
                const regexPatterns = config.regexPatterns || [];
                
                core.notice(`Searching with ${keywords.length} keywords, ${substrings.length} substrings, and ${regexPatterns.length} regex patterns`);
                
                const matchingTerms = findMatchingTermsWithLines(searchText, keywords, substrings, regexPatterns);
                if (matchingTerms.length > 0) {
                  core.notice(`Found ${matchingTerms.length} matching term(s):`);
                  
                  for (const termMatch of matchingTerms) {
                    if (termMatch.searchType === 'regex') {
                      core.notice(`  📍 Regex: "${termMatch.term}" (pattern: ${termMatch.pattern}) found ${termMatch.count} time(s):`);
                    } else {
                      core.notice(`  📍 Term: "${termMatch.term}" (${termMatch.searchType} search) found ${termMatch.count} time(s):`);
                    }
                    
                    // Show details for each match
                    termMatch.matches.forEach((match, index) => {
                      core.notice(`    ${index + 1}. Line ${match.lineNumber}: "${match.match}" [${match.searchType}]`);
                      if (match.description) {
                        core.notice(`       Description: ${match.description}`);
                      }
                      core.notice(`       Context: ${match.context}`);
                      if (match.lineContent !== match.context) {
                        core.notice(`       Full line: ${match.lineContent}`);
                      }
                    });
                  }
                  
                  shouldAddLabel = true;
                  const totalMatches = matchingTerms.reduce((sum, t) => sum + t.count, 0);
                  const keywordMatches = matchingTerms.filter(t => t.searchType === 'keyword');
                  const substringMatches = matchingTerms.filter(t => t.searchType === 'substring');
                  const regexMatches = matchingTerms.filter(t => t.searchType === 'regex');
                  
                  const keywordCount = keywordMatches.reduce((sum, t) => sum + t.count, 0);
                  const substringCount = substringMatches.reduce((sum, t) => sum + t.count, 0);
                  const regexCount = regexMatches.reduce((sum, t) => sum + t.count, 0);
                  
                  reason = `Found ${totalMatches} total matches in issue title and body (${keywordCount} keyword matches, ${substringCount} substring matches, ${regexCount} regex matches)`;
                }
              }
              
              core.notice(`Final decision: ${shouldAddLabel ? 'ADD LABEL' : 'DO NOT ADD LABEL'}`);
              core.notice(`Reason: ${reason || 'No matching terms found in issue title and body'}`);
              
              if (shouldAddLabel) {
                const existingLabels = context.payload.issue.labels.map(l => l.name);
                if (!existingLabels.includes(labelName)) {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    labels: [labelName],
                  });
                  core.notice(`Label "${labelName}" added. ${reason}`);
                  return true;
                }
                core.notice(`Label "${labelName}" already present.`);
                return false;
              }
              
              core.notice(`No matching terms found in issue title and body for label "${labelName}".`);
              return false;
            }
            
            // Process all configured labels
            const processLabels = Object.entries(labelConfig)
              .map(([labelName, config]) => processLabel(labelName, config));
            const labelsAdded = await Promise.all(processLabels);
            const numLabelsAdded = labelsAdded.reduce((x, y) => x + y, 0);
            core.notice(`Processing complete. ${numLabelsAdded} label(s) added.`);