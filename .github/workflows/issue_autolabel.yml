name: Label issues based on keywords
on:
  issues:
    types: [opened, edited, reopened]
permissions:
  issues: write          # needed so the workflow can add labels
  contents: read
concurrency:
  group: issue-labeler-${{ github.event.issue.number }}
  cancel-in-progress: true
jobs:
  add-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Label issues based on keywords
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea  # v7.0.1
        with:
          script: |
            // Configuration: Add new labels and keywords here
            const labelConfig = {
              rocm: {
                keywords: [
                  // Core ROCm/AMD terms
                  "rocm",
                  "roc",
                  "amd",
                  "hip",
                  // GPU Models - Instinct Series
                  "amd instinct",
                  "mi300",
                  "mi300x",
                  "mi300a",
                  "mi250x",
                  "mi250",
                  "mi210x",
                  "mi210",
                  "mi325x",
                  "mi350x",
                  "mi355x",
                  "mi308",
                  // GPU Models - Radeon Series
                  "amd radeon",
                  "ai pro r9700",
                  "rx 9070",
                  "rx 9060",
                  "rx 7900",
                  "rx 7800",
                  // GPU Models - Pro Series
                  "amd radeon pro",
                  "w7900",
                  "w7800",
                  "w7700",
                  "v710",
                  "v620",
                  "w6800",
                  // Architecture codes
                  "cdna3",
                  "cdna2",
                  "cdna4",
                  "cdna",
                  "gfx942",
                  "gfx90a",
                  "gfx1100",
                  "gfx1101",
                  "gfx1201",
                  "gfx1200",
                  "gfx1030",
                  "gfx950",
                  "gfx908",
                  "rdna4",
                  "rdna3",
                  "rdna2",
                  // Libraries and tools
                  "composable kernel",
                  // "aiter", // problem at 13192 aiter is used in langchain
                  "rccl",
                  "migraphx",
                  "hipgraph",
                ],
              },
            };
            
            // Helper function to remove only the collect_env.py details section
            function removeCollectEnvDetails(text) {
              // Pattern to match the specific collect_env.py details section
              // This looks for <details> tags that contain "python collect_env.py" in the summary
              const collectEnvPattern = /<details[\s\S]*?<summary>[\s\S]*?python collect_env\.py[\s\S]*?<\/summary>[\s\S]*?<\/details>/gi;
              
              // Alternative patterns in case the format varies slightly
              const alternativePatterns = [
                // Pattern for "The output of python collect_env.py"
                /<details[\s\S]*?<summary>[\s\S]*?output of[\s\S]*?python collect_env\.py[\s\S]*?<\/summary>[\s\S]*?<\/details>/gi,
                // Pattern for "collect_env.py output"
                /<details[\s\S]*?<summary>[\s\S]*?collect_env\.py[\s\S]*?output[\s\S]*?<\/summary>[\s\S]*?<\/details>/gi,
                // Pattern for environment information
                /<details[\s\S]*?<summary>[\s\S]*?environment[\s\S]*?information[\s\S]*?<\/summary>[\s\S]*?<\/details>/gi,
              ];
              
              let result = text;
              
              // Try the main pattern first
              result = result.replace(collectEnvPattern, '');
              
              // Try alternative patterns if the main one didn't match
              for (const pattern of alternativePatterns) {
                result = result.replace(pattern, '');
              }
              
              return result;
            }
            
            // Helper function to find matching keywords in text
            function findMatchingKeywords(text, keywords) {
              const matches = [];
              for (const keyword of keywords) {
                const regex = new RegExp(`\\b${keyword}\\b`, "gi");
                const keywordMatches = text.match(regex);
                if (keywordMatches) {
                  matches.push({
                    keyword: keyword,
                    matches: keywordMatches,
                    count: keywordMatches.length
                  });
                }
              }
              return matches;
            }
            
            // Helper function to check if label should be added
            async function processLabel(labelName, config) {
              const body = context.payload.issue.body || "";
              const title = context.payload.issue.title || "";
              
              core.notice(`=== DEBUG INFO for label "${labelName}" ===`);
              
              // Remove only the collect_env.py details section, keep other details
              const textWithoutCollectEnv = removeCollectEnvDetails(title + " " + body);
              
              core.notice(`Original text length: ${(title + " " + body).length}`);
              core.notice(`Text after removing collect_env details: ${textWithoutCollectEnv.length}`);
              
              let shouldAddLabel = false;
              let reason = '';
              
              // Check for keywords in the remaining text (including other details sections)
              if (textWithoutCollectEnv) {
                const matchingKeywords = findMatchingKeywords(textWithoutCollectEnv, labelConfig[labelName].keywords);
                if (matchingKeywords.length > 0) {
                  core.notice(`Found ${matchingKeywords.length} matching keyword(s):`);
                  for (const match of matchingKeywords) {
                    core.notice(`  - Keyword: "${match.keyword}" found ${match.count} time(s)`);
                  }
                  shouldAddLabel = true;
                  reason = 'Keywords found outside collect_env.py details section';
                }
              }
              
              core.notice(`Final decision: ${shouldAddLabel ? 'ADD LABEL' : 'DO NOT ADD LABEL'}`);
              core.notice(`Reason: ${reason || 'No matching keywords found outside collect_env.py details section'}`);
              core.notice(`=== END DEBUG INFO ===`);
              
              if (shouldAddLabel) {
                const existingLabels = context.payload.issue.labels.map(l => l.name);
                if (!existingLabels.includes(labelName)) {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    labels: [labelName],
                  });
                  core.notice(`Label "${labelName}" added. ${reason}`);
                  return true;
                }
                core.notice(`Label "${labelName}" already present.`);
                return false;
              }
              
              core.notice(`No matching keywords found outside collect_env.py details section for label "${labelName}".`);
              return false;
            }
            
            // Process all configured labels
            const processLabels = Object.entries(labelConfig)
              .map(([labelName, config]) => processLabel(labelName, config));
            const labelsAdded = await Promise.all(processLabels);
            const numLabelsAdded = labelsAdded.reduce((x, y) => x + y, 0);
            core.notice(`Processing complete. ${numLabelsAdded} label(s) added.`);