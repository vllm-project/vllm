name: Label issues based on keywords
on:
  issues:
    types: [opened, edited, reopened]
permissions:
  issues: write          # needed so the workflow can add labels
  contents: read
concurrency:
  group: issue-labeler-${{ github.event.issue.number }}
  cancel-in-progress: true
jobs:
  add-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Label issues based on keywords
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea  # v7.0.1
        with:
          script: |
            // Configuration: Add new labels and keywords here
            const labelConfig = {
              rocm: {
                keywords: [
                  // Core ROCm/AMD terms
                  "rocm",
                  "roc",
                  "amd",
                  "hip",

                  // GPU Models - Instinct Series
                  "amd instinct",
                  "mi300",
                  "mi300x",
                  "mi300a",
                  "mi250x",
                  "mi250",
                  "mi210x",
                  "mi210",
                  "mi325x",
                  "mi350x",
                  "mi355x",
                  "mi308",

                  // GPU Models - Radeon Series
                  "amd radeon",
                  "ai pro r9700",
                  "rx 9070",
                  "rx 9060",
                  "rx 7900",
                  "rx 7800",

                  // GPU Models - Pro Series
                  "amd radeon pro",
                  "w7900",
                  "w7800",
                  "w7700",
                  "v710",
                  "v620",
                  "w6800",

                  // Architecture codes
                  "cdna3",
                  "cdna2",
                  "cdna4",
                  "cdna",
                  "gfx942",
                  "gfx90a",
                  "gfx1100",
                  "gfx1101",
                  "gfx1201",
                  "gfx1200",
                  "gfx1030",
                  "gfx950",
                  "gfx908",
                  "rdna4",
                  "rdna3",
                  "rdna2",

                  // Libraries and tools
                  "composable kernel",
                  // "aiter", // problem at 13192 aiter is used in langchain
                  "rccl",
                  "migraphx",
                  "hipgraph",
                ],
                exclusions: [
                  "rocm used to build pytorch: none",
                  "rocm used to build pytorch: 0\\.0\\.0",
                  "rocm used to build pytorch: not available",
                  "ROCM Version: Could not collect",
                  "ROCM used to build PyTorch: N\\/A",
                  "ROCM used to build PyTorch : N\\/A",
                ],
              },
            };

            // Helper function to check if label should be added
            async function processLabel(labelName, config) {
              const body = context.payload.issue.body || "" ;
              const title = context.payload.issue.title || "";
              const fullText = title + " " + body
              
              const keywordPattern = labelConfig[labelName].keywords.join("|");
              const excludePattern = labelConfig[labelName].exclusions.join("|");

              const kwRegexLine = `\\b(${keywordPattern})\\b`;
              const excludeRegexLine = `\\b(${excludePattern})\\b`;
              
              // check the issue title and body
              const kwRegex = new RegExp(kwRegexLine, "gi");
              const excludeRegex = new RegExp(excludeRegexLine, "gi");

              const hit = kwRegex.test(fullText);
              const excludeHit = excludeRegex.test(fullText);
              
              if (hit && !excludeHit) {
                const existingLabels = context.payload.issue.labels.map(l => l.name);
                
                if (!existingLabels.includes(labelName)) {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    labels: [labelName],
                  });
                  core.notice(`Label "${labelName}" added.`);
                  return true;
                }
                core.notice(`Label "${labelName}" already present.`);
                return false;
              }
              core.notice(`No keywords found for label "${labelName}".`);
              return false;
            }

            // Process all configured labels
            const processLabels = Object.entries(labelConfig)
              .map(([labelName, config]) => processLabel(labelName, config));
            const labelsAdded = await Promise.all(processLabels);
            const numLabelsAdded = labelsAdded.reduce((x, y) => x + y, 0);
  
            core.notice(`Processing complete. ${numLabelsAdded} label(s) added.`);