name: Label issues based on keywords
on:
  issues:
    types: [opened, edited, reopened]
permissions:
  issues: write          # needed so the workflow can add labels
  contents: read
concurrency:
  group: issue-labeler-${{ github.event.issue.number }}
  cancel-in-progress: true
jobs:
  add-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Label issues based on keywords
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea  # v7.0.1
        with:
          script: |
            // Configuration: Add new labels and keywords here
            const labelConfig = {
              rocm: {
                keywords: [
                  // Core ROCm/AMD terms
                  "rocm",
                  "roc",
                  "amd",
                  "hip",
                  // GPU Models - Instinct Series
                  "amd instinct",
                  "mi300",
                  "mi300x",
                  "mi300a",
                  "mi250x",
                  "mi250",
                  "mi210x",
                  "mi210",
                  "mi325x",
                  "mi350x",
                  "mi355x",
                  "mi308",
                  // GPU Models - Radeon Series
                  "amd radeon",
                  "ai pro r9700",
                  "rx 9070",
                  "rx 9060",
                  "rx 7900",
                  "rx 7800",
                  // GPU Models - Pro Series
                  "amd radeon pro",
                  "w7900",
                  "w7800",
                  "w7700",
                  "v710",
                  "v620",
                  "w6800",
                  // Architecture codes
                  "cdna3",
                  "cdna2",
                  "cdna4",
                  "cdna",
                  "gfx942",
                  "gfx90a",
                  "gfx1100",
                  "gfx1101",
                  "gfx1201",
                  "gfx1200",
                  "gfx1030",
                  "gfx950",
                  "gfx908",
                  "rdna4",
                  "rdna3",
                  "rdna2",
                  // Libraries and tools
                  "composable kernel",
                  // "aiter", // problem at 13192 aiter is used in langchain
                  "rccl",
                  "migraphx",
                  "hipgraph",
                ],
                exclusions: [
                  "rocm used to build pytorch: none",
                  "rocm used to build pytorch: 0\\.0\\.0",
                  "rocm used to build pytorch: not available",
                  "ROCM Version: Could not collect",
                  "ROCM used to build PyTorch: N/A",
                  "ROCM used to build PyTorch : N/A",
                ],
              },
            };
            
            // Helper function to find which keywords match
            function findMatchingKeywords(text, keywords) {
              const matches = [];
              for (const keyword of keywords) {
                const regex = new RegExp(`\\b${keyword}\\b`, "gi");
                const keywordMatches = text.match(regex);
                if (keywordMatches) {
                  matches.push({
                    keyword: keyword,
                    matches: keywordMatches,
                    count: keywordMatches.length
                  });
                }
              }
              return matches;
            }
            
            // Helper function to find which exclusions match
            function findMatchingExclusions(text, exclusions) {
              const matches = [];
              for (const exclusion of exclusions) {
                const regex = new RegExp(exclusion, "gi");
                const exclusionMatches = text.match(regex);
                if (exclusionMatches) {
                  matches.push({
                    exclusion: exclusion,
                    matches: exclusionMatches,
                    count: exclusionMatches.length
                  });
                }
              }
              return matches;
            }
            
            // Helper function to check if label should be added
            async function processLabel(labelName, config) {
              const body = context.payload.issue.body || "" ;
              const title = context.payload.issue.title || "";
              const fullText = title + " " + body;
              
              // Debug: Find matching keywords
              const matchingKeywords = findMatchingKeywords(fullText, labelConfig[labelName].keywords);
              const matchingExclusions = findMatchingExclusions(fullText, labelConfig[labelName].exclusions);
              
              core.notice(`=== DEBUG INFO for label "${labelName}" ===`);
              core.notice(`Issue title: "${title}"`);
              core.notice(`Issue body length: ${body.length} characters`);
              
              if (matchingKeywords.length > 0) {
                core.notice(`Found ${matchingKeywords.length} matching keyword(s):`);
                for (const match of matchingKeywords) {
                  core.notice(`  - Keyword: "${match.keyword}" found ${match.count} time(s): ${JSON.stringify(match.matches)}`);
                }
              } else {
                core.notice(`No matching keywords found`);
              }
              
              if (matchingExclusions.length > 0) {
                core.notice(`Found ${matchingExclusions.length} matching exclusion(s):`);
                for (const match of matchingExclusions) {
                  core.notice(`  - Exclusion: "${match.exclusion}" found ${match.count} time(s): ${JSON.stringify(match.matches)}`);
                }
              } else {
                core.notice(`No matching exclusions found`);
              }
              
              const keywordPattern = labelConfig[labelName].keywords.join("|");
              const excludePattern = labelConfig[labelName].exclusions.join("|");
              const kwRegexLine = `\\b(${keywordPattern})\\b`;
              const excludeRegexLine = `(${excludePattern})`;
              
              // check the issue title and body
              const kwRegex = new RegExp(kwRegexLine, "gi");
              const excludeRegex = new RegExp(excludeRegexLine, "gi");
              const hit = kwRegex.test(fullText);
              const excludeHit = excludeRegex.test(fullText);
              
              core.notice(`Keyword regex test result: ${hit}`);
              core.notice(`Exclusion regex test result: ${excludeHit}`);
              core.notice(`Final decision: ${hit && !excludeHit ? 'ADD LABEL' : 'DO NOT ADD LABEL'}`);
              core.notice(`=== END DEBUG INFO ===`);
              
              if (hit && !excludeHit) {
                const existingLabels = context.payload.issue.labels.map(l => l.name);
                if (!existingLabels.includes(labelName)) {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    labels: [labelName],
                  });
                  core.notice(`Label "${labelName}" added.`);
                  return true;
                }
                core.notice(`Label "${labelName}" already present.`);
                return false;
              }
              core.notice(`No keywords found for label "${labelName}".`);
              return false;
            }
            // Process all configured labels
            const processLabels = Object.entries(labelConfig)
              .map(([labelName, config]) => processLabel(labelName, config));
            const labelsAdded = await Promise.all(processLabels);
            const numLabelsAdded = labelsAdded.reduce((x, y) => x + y, 0);
            core.notice(`Processing complete. ${numLabelsAdded} label(s) added.`);  